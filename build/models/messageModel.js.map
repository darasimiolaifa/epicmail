{"version":3,"sources":["../../src/models/messageModel.js"],"names":["MessageModel","userId","query","queryFunction","messages","id","message","senderId","user","messageId","selectQuery","deleteQuery","rows","sender_id","status","messaage","payload","subject","receiverId","createdOn","Date","messageQuery","inboxQuery","result","inbox_id"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;IAEMA,Y;;;;;;;;;;;;+CACgCC,M;;;;;;AAC5BC,gBAAAA,K,GAAQ,oG;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACD,MAAD,CAA3B,C;;;AAAjBG,gBAAAA,Q;iDACCA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMqBC,E;;;;;;AACxBH,gBAAAA,K,GAAQ,sC;;;uBAEUC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACG,EAAD,CAA3B,C;;;AAAhBC,gBAAAA,O;kDACCA,O;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMkBC,Q;;;;;;AACrBL,gBAAAA,K,GAAQ,6C;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACK,QAAD,CAA3B,C;;;AAAjBH,gBAAAA,Q;kDACCA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMoBH,M;;;;;;AACvBC,gBAAAA,K,GAAQ,4H;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACD,MAAD,EAAS,QAAT,CAA3B,C;;;AAAjBG,gBAAAA,Q;kDACCA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMwBI,I,EAAMC,S;;;;;;;AACjCC,gBAAAA,W,GAAc,gH;AACdC,gBAAAA,W,GAAc,gD;;;uBAEKR,kBAAcD,KAAd,CAAoBQ,WAApB,EAAiC,CAACD,SAAD,CAAjC,C;;;;AAAfG,gBAAAA,I,QAAAA,I;;sBACJA,IAAI,CAACC,SAAL,KAAmBL,IAAI,CAACH,EAAxB,IAA8BO,IAAI,CAACE,MAAL,KAAgB,M;;;;;kDACzC;AAAEC,kBAAAA,QAAQ,EAAE;AAAZ,iB;;;;uBAEaZ,kBAAcD,KAAd,CAAoBS,WAApB,EAAiC,CAACF,SAAD,CAAjC,C;;;AAAhBH,gBAAAA,O;kDACCA,O;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMcU,O;;;;;;;AAErBC,gBAAAA,O,GACED,O,CADFC,O,EAASX,O,GACPU,O,CADOV,O,EAASC,Q,GAChBS,O,CADgBT,Q,EAAUW,U,GAC1BF,O,CAD0BE,U;AAExBC,gBAAAA,S,GAAY,IAAIC,IAAJ,E;AACZC,gBAAAA,Y,GAAe,wH;AACfC,gBAAAA,U,GAAa,mF;;;uBAEMnB,kBAAcD,KAAd,CAAoBmB,YAApB,EACrB,CAACJ,OAAD,EAAUX,OAAV,EAAmBa,SAAnB,EAA8BZ,QAA9B,EAAwCW,UAAxC,CADqB,C;;;;AAAfN,gBAAAA,I,SAAAA,I;;uBAEaT,kBAAcD,KAAd,CAAoBoB,UAApB,EAAgC,CAACJ,UAAD,EAAaN,IAAI,CAACP,EAAlB,EAAsB,QAAtB,CAAhC,C;;;AAAfkB,gBAAAA,M;oEACMX,I;AAAMY,kBAAAA,QAAQ,EAAED,MAAM,CAAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;eAO1BL,Y","sourcesContent":["import queryFunction from '../database';\r\n\r\nclass MessageModel {\r\n  static async getAllReceivedMessages(userId) {\r\n    const query = 'SELECT * FROM messages INNER JOIN inbox on messages.id = inbox.message_id WHERE inbox.user_id = $1';\r\n    try {\r\n      const messages = await queryFunction.query(query, [userId]);\r\n      return messages;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getSpecificMessage(id) {\r\n    const query = 'SELECT * FROM messages wHERE id = $1';\r\n    try {\r\n      const message = await queryFunction.query(query, [id]);\r\n      return message;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getSentMessages(senderId) {\r\n    const query = 'SELECT * FROM messages wHERE sender_id = $1';\r\n    try {\r\n      const messages = await queryFunction.query(query, [senderId]);\r\n      return messages;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getUnreadMessages(userId) {\r\n    const query = 'SELECT * FROM messages INNER JOIN inbox on messages.id = inbox.message_id WHERE inbox.user_id = $1 AND message.status = $2';\r\n    try {\r\n      const messages = await queryFunction.query(query, [userId, 'unread']);\r\n      return messages;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async deleteSpecificMessage(user, messageId) {\r\n    const selectQuery = 'SELECT senderId, status FROM messages INNER JOIN inbox ON inbox.message_id = messages.id WHERE message.id = $1';\r\n    const deleteQuery = 'DELETE FROM messages WHERE id = $1 RETURNING *';\r\n    try {\r\n      const { rows } = await queryFunction.query(selectQuery, [messageId]);\r\n      if (rows.sender_id === user.id && rows.status === 'read') {\r\n        return { messaage: 'Message has been read already.' };\r\n      }\r\n      const message = await queryFunction.query(deleteQuery, [messageId]);\r\n      return message;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async sendMessage(payload) {\r\n    const {\r\n      subject, message, senderId, receiverId,\r\n    } = payload;\r\n    const createdOn = new Date();\r\n    const messageQuery = 'INSERT INTO messages(subject, message, created_on, sender_id, receiver_id) VALUES($1, $2, $3, $4, $5, $6) RETURNING id';\r\n    const inboxQuery = 'INSERT INTO inbox(receiver_id, message_id, status) VALUES($1, $2, $3) RETURNING *';\r\n    try {\r\n      const { rows } = await queryFunction.query(messageQuery,\r\n        [subject, message, createdOn, senderId, receiverId]);\r\n      const result = await queryFunction.query(inboxQuery, [receiverId, rows.id, 'unread']);\r\n      return { ...rows, inbox_id: result.id };\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MessageModel;\r\n"],"file":"messageModel.js"}