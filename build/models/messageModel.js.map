{"version":3,"sources":["../../src/models/messageModel.js"],"names":["MessageModel","userId","query","queryFunction","rows","id","user","messageId","selectQuery","deleteQuery","sender_id","messaage","status","message","payload","body","subject","receiverEmail","createdOn","Date","receiverQuery","messageQuery","inboxQuery","receiverResult","receiverId","savedMessage","results","inboxMessage","inbox_id"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;IAEMA,Y;;;;;;;;;;;;+CACgCC,M;;;;;;;AAC5BC,gBAAAA,K,GAAQ,wG;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACD,MAAD,CAA3B,C;;;;AAAfG,gBAAAA,I,QAAAA,I;iDACDA,I;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMqBC,E;;;;;;;AACxBH,gBAAAA,K,GAAQ,sC;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACG,EAAD,CAA3B,C;;;;AAAfD,gBAAAA,I,SAAAA,I;kDACDA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMcE,I;;;;;;;AACrBJ,gBAAAA,K,GAAQ,6C;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACI,IAAI,CAACD,EAAN,CAA3B,C;;;;AAAfD,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMoBH,M;;;;;;;AACvBC,gBAAAA,K,GAAQ,8H;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACD,MAAD,EAAS,QAAT,CAA3B,C;;;;AAAfG,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMwBE,I,EAAMC,S;;;;;;;AACjCC,gBAAAA,W,GAAc,kH;AACdC,gBAAAA,W,GAAc,gD;;;uBAEKN,kBAAcD,KAAd,CAAoBM,WAApB,EAAiC,CAACD,SAAD,CAAjC,C;;;;AAAfH,gBAAAA,I,SAAAA,I;;sBACJA,IAAI,CAAC,CAAD,CAAJ,CAAQM,SAAR,KAAsBJ,IAAI,CAACD,E;;;;;kDACtB;AAAEM,kBAAAA,QAAQ,EAAE;AAAZ,iB;;;sBAELP,IAAI,CAACQ,MAAL,KAAgB,M;;;;;kDACX;AAAED,kBAAAA,QAAQ,EAAE;AAAZ,iB;;;;uBAEaR,kBAAcD,KAAd,CAAoBO,WAApB,EAAiC,CAACF,SAAD,CAAjC,C;;;AAAhBM,gBAAAA,O;kDACCA,OAAO,CAACT,IAAR,CAAa,CAAb,C;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMcU,O;;;;;;;gCAGnBA,OAAO,CAACC,I,EADVC,O,iBAAAA,O,EAASH,O,iBAAAA,O,EAASI,a,iBAAAA,a;AAEZX,gBAAAA,I,GAASQ,O,CAATR,I;AACFY,gBAAAA,S,GAAY,IAAIC,IAAJ,E;AACZC,gBAAAA,a,GAAgB,sC;AAChBC,gBAAAA,Y,GAAe,kG;AACfC,gBAAAA,U,GAAa,mF;;;uBAEYnB,kBAAcD,KAAd,CAAoBkB,aAApB,EAAmC,CAACH,aAAD,CAAnC,C;;;AAAvBM,gBAAAA,c;AACAC,gBAAAA,U,GAAaD,cAAc,CAACnB,IAAf,CAAoB,CAApB,EAAuBC,E;;uBACnBF,kBAAcD,KAAd,CAAoBmB,YAApB,EACrB,CAACL,OAAD,EAAUH,OAAV,EAAmBK,SAAnB,EAA8BZ,IAAI,CAACD,EAAnC,CADqB,C;;;;AAAfD,gBAAAA,I,SAAAA,I;AAEFqB,gBAAAA,Y,GAAerB,IAAI,CAAC,CAAD,C;;uBACHD,kBAAcD,KAAd,CAAoBoB,UAApB,EAAgC,CAACE,UAAD,EAAaC,YAAY,CAACpB,EAA1B,EAA8B,QAA9B,CAAhC,C;;;AAAhBqB,gBAAAA,O;AACAC,gBAAAA,Y,GAAeD,OAAO,CAACtB,IAAR,CAAa,CAAb,C;oEACTqB,Y;AAAcG,kBAAAA,QAAQ,EAAED,YAAY,CAACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;eAOxCL,Y","sourcesContent":["import queryFunction from '../database';\r\n\r\nclass MessageModel {\r\n  static async getAllReceivedMessages(userId) {\r\n    const query = 'SELECT * FROM messages INNER JOIN inbox on messages.id = inbox.message_id WHERE inbox.receiver_id = $1';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [userId]);\r\n      return rows;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getSpecificMessage(id) {\r\n    const query = 'SELECT * FROM messages wHERE id = $1';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [id]);\r\n      return rows[0];\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getSentMessages(user) {\r\n    const query = 'SELECT * FROM messages wHERE sender_id = $1';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [user.id]);\r\n      return rows;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getUnreadMessages(userId) {\r\n    const query = 'SELECT * FROM messages INNER JOIN inbox on messages.id = inbox.message_id WHERE inbox.receiver_id = $1 AND inbox.status = $2';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [userId, 'unread']);\r\n      return rows;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async deleteSpecificMessage(user, messageId) {\r\n    const selectQuery = 'SELECT sender_id, status FROM messages INNER JOIN inbox ON inbox.message_id = messages.id WHERE messages.id = $1';\r\n    const deleteQuery = 'DELETE FROM messages WHERE id = $1 RETURNING *';\r\n    try {\r\n      const { rows } = await queryFunction.query(selectQuery, [messageId]);\r\n      if (rows[0].sender_id !== user.id) {\r\n        return { messaage: 'This message is not yours. You do not have access to it.' };\r\n      }\r\n      if (rows.status === 'read') {\r\n        return { messaage: 'Message has been read already.' };\r\n      }\r\n      const message = await queryFunction.query(deleteQuery, [messageId]);\r\n      return message.rows[0];\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async sendMessage(payload) {\r\n    const {\r\n      subject, message, receiverEmail,\r\n    } = payload.body;\r\n    const { user } = payload;\r\n    const createdOn = new Date();\r\n    const receiverQuery = 'SELECT * FROM users WHERE email = $1';\r\n    const messageQuery = 'INSERT INTO messages(subject, message, created_on, sender_id) VALUES($1, $2, $3, $4) RETURNING *';\r\n    const inboxQuery = 'INSERT INTO inbox(receiver_id, message_id, status) VALUES($1, $2, $3) RETURNING *';\r\n    try {\r\n      const receiverResult = await queryFunction.query(receiverQuery, [receiverEmail]);\r\n      const receiverId = receiverResult.rows[0].id;\r\n      const { rows } = await queryFunction.query(messageQuery,\r\n        [subject, message, createdOn, user.id]);\r\n      const savedMessage = rows[0];\r\n      const results = await queryFunction.query(inboxQuery, [receiverId, savedMessage.id, 'unread']);\r\n      const inboxMessage = results.rows[0];\r\n      return { ...savedMessage, inbox_id: inboxMessage.id };\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MessageModel;\r\n"],"file":"messageModel.js"}