{"version":3,"sources":["../../src/models/messageModel.js"],"names":["MessageModel","messages","messagesData","index","specificMessage","sentMessages","unreadMessages","deletedMessage","splice","payload","id","createdOn","Date","moment","HTML5_FMT","DATETIME_LOCAL_MS","message","status","push"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;IAEMA,Y;;;AACJ,0BAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgBC,oBAAhB;AACD;;;;qCAEgB;AACf,aAAO,yBAAe,KAAKD,QAApB,EAA8B,QAA9B,EAAwC,CAAC,QAAD,EAAW,MAAX,CAAxC,CAAP;AACD;;;uCAEkBE,K,EAAO;AACxB,UAAMC,eAAe,GAAG,KAAKH,QAAL,CAAcE,KAAd,CAAxB;AACA,aAAOC,eAAP;AACD;;;sCAEiB;AAChB,UAAMC,YAAY,GAAG,yBAAe,KAAKJ,QAApB,EAA8B,QAA9B,EAAwC,CAAC,MAAD,CAAxC,CAArB;AACA,aAAOI,YAAP;AACD;;;wCAEmB;AAClB,UAAMC,cAAc,GAAG,yBAAe,KAAKL,QAApB,EAA8B,QAA9B,EAAwC,CAAC,QAAD,CAAxC,CAAvB;AACA,aAAOK,cAAP;AACD;;;0CAEqBH,K,EAAO;AAC3B,UAAMI,cAAc,GAAG,KAAKN,QAAL,CAAcO,MAAd,CAAqBL,KAArB,EAA4B,CAA5B,EAA+B,CAA/B,CAAvB;AACA,aAAOI,cAAP;AACD;;;gCAEWE,O,EAAS;AACnB,UAAMC,EAAE,GAAG,0BAAmB,KAAKT,QAAxB,IAAoC,CAA/C;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,CAASC,gBAAOC,SAAP,CAAiBC,iBAA1B,CAAlB;;AACA,UAAMC,OAAO;AACXN,QAAAA,EAAE,EAAFA,EADW;AAEXC,QAAAA,SAAS,EAATA;AAFW,SAGRF,OAHQ;AAIXQ,QAAAA,MAAM,EAAE;AAJG,QAAb;;AAMA,WAAKhB,QAAL,CAAciB,IAAd,CAAmBF,OAAnB;AACA,aAAOA,OAAP;AACD;;;;;;eAGY,IAAIhB,YAAJ,E","sourcesContent":["import moment from 'moment';\nimport filterMessages from '../utils/filterData';\nimport generateIDFromData from '../utils/idGenerator';\nimport messagesData from '../dummy/messageData';\n\nclass MessageModel {\n  constructor() {\n    this.messages = messagesData;\n  }\n  \n  getAllMessages() {\n    return filterMessages(this.messages, 'status', ['unread', 'read']);\n  }\n  \n  getSpecificMessage(index) {\n    const specificMessage = this.messages[index];\n    return specificMessage;\n  }\n  \n  getSentMessages() {\n    const sentMessages = filterMessages(this.messages, 'status', ['sent']);\n    return sentMessages;\n  }\n  \n  getUnreadMessages() {\n    const unreadMessages = filterMessages(this.messages, 'status', ['unread']);\n    return unreadMessages;\n  }\n  \n  deleteSpecificMessage(index) {\n    const deletedMessage = this.messages.splice(index, 1)[0];\n    return deletedMessage;\n  }\n  \n  sendMessage(payload) {\n    const id = generateIDFromData(this.messages) + 1;\n    const createdOn = new Date(moment.HTML5_FMT.DATETIME_LOCAL_MS);\n    const message = {\n      id,\n      createdOn,\n      ...payload,\n      status: 'sent',\n    };\n    this.messages.push(message);\n    return message;\n  }\n}\n\nexport default new MessageModel();\n"],"file":"messageModel.js"}