{"version":3,"sources":["../../src/models/groupModel.js"],"names":["GroupModel","userId","query","queryFunction","rows","payload","body","name","description","user","createdOn","Date","nameCheck","rowCount","message","groupEmail","id","groupId","params","email","userModel","getUserbyEmail","newUser","ownerShipQuery","groupOwner","response","owner_id","owner","getUserbyId","deleteQuery"],"mappings":"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","sourcesContent":["import queryFunction from '../database';\nimport userModel from './userModel';\n\nclass GroupModel {\n  static async getAllGroups(userId) {\n    const query = 'SELECT * FROM groups WHERE owner_id = $1';\n    try {\n      const { rows } = await queryFunction.query(query, [userId]);\n      return rows;\n    } catch (error) {\n      return error;\n    }\n  }\n  \n  static async createGroup(payload) {\n    const {\n      name, description,\n    } = payload.body;\n    const { user } = payload;\n    const createdOn = new Date();\n    const nameCheck = 'SELECT * FROM groups WHERE name = $1';\n    const query = 'INSERT INTO groups (name, description, owner_id, group_email, created_on) VALUES($1, $2, $3, $4, $5) RETURNING *';\n    try {\n      const { rowCount } = await queryFunction.query(nameCheck, [name]);\n      if (rowCount > 0) {\n        return { message: `The group name ${name} already exists. Please choose another` };\n      }\n      const groupEmail = `${name}@epicmail.com`;\n      const { rows } = await queryFunction.query(query,\n        [name, description, user.id, groupEmail, createdOn]);\n      return rows[0];\n    } catch (error) {\n      return error;\n    }\n  }\n  \n  static async editGroupName(payload) {\n    const { name } = payload.body;\n    const { groupId } = payload.params;\n    const { user } = payload;\n    const query = 'UPDATE groups SET name = $1 WHERE id = $2 AND owner_id = $3 RETURNING *';\n    try {\n      const { rows } = await queryFunction.query(query, [name, groupId, user.id]);\n      return rows[0];\n    } catch (error) {\n      return error;\n    }\n  }\n  \n  static async addUserToGroup(payload) {\n    const { email } = payload.body;\n    const { groupId } = payload.params;\n    const { user } = payload;\n    const newUser = await userModel.getUserbyEmail(email);\n    const ownerShipQuery = 'SELECT * FROM groups WHERE id = $1';\n    const query = 'INSERT INTO groups_members(group_id, member_id) VALUES($1, $2) RETURNING *';\n    let response;\n    try {\n      const groupOwner = await queryFunction.query(ownerShipQuery, [groupId]);\n      if (groupOwner.rowCount === 0) {\n        response = { message: 'There is no such group in our records.' };\n      } else if (groupOwner.rows[0].owner_id !== user.id) {\n        response = { message: 'You are not the owner of this group and so do not have access to it.' };\n      }\n      const { rows } = await queryFunction.query(query, [groupId, newUser.id]);\n      [response] = rows;\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n  \n  static async deleteUserFromSpecificGroup(payload) {\n    const { groupId, userId } = payload.params;\n    const { user: owner } = payload;\n    let response;\n    const ownerShipQuery = 'SELECT * FROM groups WHERE id = $1';\n    const newUser = await userModel.getUserbyId(userId);\n    const deleteQuery = 'DELETE FROM groups_members WHERE group_id = $1 AND member_id = $2 RETURNING *';\n    try {\n      const groupOwner = await queryFunction.query(ownerShipQuery, [groupId]);\n      if (groupOwner.rowCount === 0) {\n        response = { message: 'There is no such group in our records.' };\n      } else if (groupOwner.rows[0].owner_id !== owner.id) {\n        response = { message: 'You are not the owner of this group and so do not have access to it.' };\n      } else {\n        await queryFunction.query(deleteQuery, [groupId, newUser.id]);\n        response = `User ${newUser.email} deleted from group successfully`;\n      }\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n  \n  static async deleteSpecificGroup(payload) {\n    const { groupId } = payload.params;\n    const { user: owner } = payload;\n    const ownerShipQuery = 'SELECT * FROM groups WHERE id = $1';\n    const query = 'DELETE FROM groups WHERE id = $1 RETURNING *';\n    let response;\n    try {\n      const groupOwner = await queryFunction.query(ownerShipQuery, [groupId]);\n      if (groupOwner.rowCount === 0) {\n        response = { message: 'There is no such group in our records.' };\n      } else if (groupOwner.rows[0].owner_id !== owner.id) {\n        response = { message: 'You are not the owner of this group and so do not have access to it.' };\n      } else {\n        const { rows } = await queryFunction.query(query, [groupId]);\n        [response] = rows;\n      }\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport default GroupModel;\n"],"file":"groupModel.js"}