{"version":3,"sources":["../../src/models/userModel.js"],"names":["UserModel","query","queryFunction","rows","username","email","id","payload","password","firstName","lastName","bcrypt","genSalt","salt","hash","hashedPassword","toLowerCase","createdOn","Date"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;IAEMA,S;;;;;;;;;;;;;;;;;;;AAEIC,gBAAAA,K,GAAQ,qB;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,C;;;;AAAfE,gBAAAA,I,QAAAA,I;iDACDA,I;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMoBC,Q;;;;;;;AACvBH,gBAAAA,K,GAAQ,yC;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACG,QAAD,CAA3B,C;;;;AAAfD,gBAAAA,I,SAAAA,I;kDACDA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMaE,K;;;;;;;AACpBJ,gBAAAA,K,GAAQ,sC;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACI,KAAD,CAA3B,C;;;;AAAfF,gBAAAA,I,SAAAA,I;kDACDA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMUG,E;;;;;;;AACjBL,gBAAAA,K,GAAQ,mC;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACK,EAAD,CAA3B,C;;;;AAAfH,gBAAAA,I,SAAAA,I;kDACDA,IAAI,CAAC,CAAD,C;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMSI,O;;;;;;;AAEpBH,gBAAAA,Q,GACEG,O,CADFH,Q,EAAUI,Q,GACRD,O,CADQC,Q,EAAUC,S,GAClBF,O,CADkBE,S,EAAWC,Q,GAC7BH,O,CAD6BG,Q;;uBAEdC,kBAAOC,OAAP,E;;;AAAbC,gBAAAA,I;;uBACuBF,kBAAOG,IAAP,CAAYN,QAAZ,EAAsBK,IAAtB,C;;;AAAvBE,gBAAAA,c;AACAV,gBAAAA,K,aAAWD,QAAQ,CAACY,WAAT,E;AACXC,gBAAAA,S,GAAY,IAAIC,IAAJ,E;AACZjB,gBAAAA,K,GAAQ,8J;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAChDQ,SADgD,EAEhDC,QAFgD,EAGhDK,cAHgD,EAIhDE,SAJgD,EAKhDb,QAAQ,CAACY,WAAT,EALgD,EAMhDX,KANgD,CAA3B,C;;;;AAAfF,gBAAAA,I,SAAAA,I;kDAQDA,I;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMiBG,E;;;;;;;AACpBL,gBAAAA,K,GAAQ,+C;;;uBAEWC,kBAAcD,KAAd,CAAoBA,KAApB,EAA2B,CAACK,EAAD,CAA3B,C;;;;AAAfH,gBAAAA,I,SAAAA,I;kDACDA,I;;;;;;;;;;;;;;;;;;;;;;;;;;eAOEH,S","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport queryFunction from '../database';\r\n\r\nclass UserModel {\r\n  static async getAllusers() {\r\n    const query = 'SELECT * FROM users';\r\n    try {\r\n      const { rows } = await queryFunction.query(query);\r\n      return rows;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getUserbyUsername(username) {\r\n    const query = 'SELECT * FROM users WHERE username = $1';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [username]);\r\n      return rows[0];\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getUserbyEmail(email) {\r\n    const query = 'SELECT * FROM users WHERE email = $1';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [email]);\r\n      return rows[0];\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async getUserbyId(id) {\r\n    const query = 'SELECT * FROM users WHERE id = $1';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [id]);\r\n      return rows[0];\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async createUser(payload) {\r\n    const {\r\n      username, password, firstName, lastName,\r\n    } = payload;\r\n    const salt = await bcrypt.genSalt();\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n    const email = `${username.toLowerCase()}@epicmail.com`;\r\n    const createdOn = new Date();\r\n    const query = 'INSERT INTO users(first_name, last_name, password, created_on, username, email) VALUES($1, $2, $3, $4, $5, $6) RETURNING id, first_name, last_name, username';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [\r\n        firstName,\r\n        lastName,\r\n        hashedPassword,\r\n        createdOn,\r\n        username.toLowerCase(),\r\n        email,\r\n      ]);\r\n      return rows;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n  \r\n  static async deleteUserbyId(id) {\r\n    const query = 'DELETE * FROM users wHERE id = $1 RETURNING *';\r\n    try {\r\n      const { rows } = await queryFunction.query(query, [id]);\r\n      return rows;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserModel;\r\n"],"file":"userModel.js"}