{"version":3,"sources":["../../../src/middleware/validation/authValidation.js"],"names":["validateAuthData","req","res","next","url","body","userModel","getAllusers","users","required","missingAndEmptyErrors","error","invalidUsernameErrors","username","invalidPasswordErrors","password","invalidInput","status","Math","max"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,YAAAA,GAFe,GAEDH,GAFC,CAEfG,GAFe,EAEVC,IAFU,GAEDJ,GAFC,CAEVI,IAFU;AAAA;AAAA,mBAGHC,mBAAUC,WAAV,EAHG;;AAAA;AAGjBC,YAAAA,KAHiB;;AAKvB,gBAAIJ,GAAG,KAAK,qBAAZ,EAAmC;AACjCK,cAAAA,QAAQ,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,CAAX;AACD,aAFD,MAEO;AACLA,cAAAA,QAAQ,GAAG,CAAC,UAAD,EAAa,UAAb,CAAX;AACD;;AAGKC,YAAAA,qBAZiB,GAYO,yCAA2BT,GAAG,CAACI,IAA/B,EAAqCI,QAArC,EAA+CE,KAA/C,CAZP;AAajBC,YAAAA,qBAbiB,GAaO,+BAAiBR,GAAjB,EAAsBI,KAAtB,EAA6BH,IAAI,CAACQ,QAAlC,CAbP;AAcjBC,YAAAA,qBAdiB,GAcO,+BAAiBV,GAAjB,EAAsBI,KAAtB,EAA6BH,IAAI,CAACU,QAAlC,EAA4CV,IAAI,CAACQ,QAAjD,CAdP;AAgBvBF,YAAAA,KAAK,qBAAQD,qBAAR,CAAL;AACAC,YAAAA,KAAK,CAACK,YAAN,qBAA0BJ,qBAA1B,EAAoDE,qBAApD;AAEMG,YAAAA,MAnBiB,GAmBRC,IAAI,CAACC,GAAL,CACb,GADa,EAEbT,qBAAqB,CAACO,MAFT,EAGbL,qBAAqB,CAACK,MAHT,EAIbH,qBAAqB,CAACG,MAJT,CAnBQ;;AAAA,kBA0BnBA,MAAM,KAAK,GA1BQ;AAAA;AAAA;AAAA;;AAAA,6CA2Bd,6BAAef,GAAf,EAAoBS,KAApB,EAA2BM,MAA3B,CA3Bc;;AAAA;AAAA,6CA8BhBd,IAAI,EA9BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBH,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;eAiCeA,gB","sourcesContent":["import checkMissingRequiredValues from './checkMissingRequiredValues';\r\nimport validateUsername from './validateUsername';\r\nimport validatePassword from './validatePassword';\r\nimport serverResponse from '../../utils/serverResponse';\r\nimport userModel from '../../models/userModel';\r\n\r\nconst validateAuthData = async (req, res, next) => {\r\n  let required;\r\n  const { url, body } = req;\r\n  const users = await userModel.getAllusers();\r\n  \r\n  if (url === '/api/v1/auth/signup') {\r\n    required = ['firstName', 'lastName', 'username', 'password'];\r\n  } else {\r\n    required = ['username', 'password'];\r\n  }\r\n  let error;\r\n  \r\n  const missingAndEmptyErrors = checkMissingRequiredValues(req.body, required, error);\r\n  const invalidUsernameErrors = validateUsername(url, users, body.username);\r\n  const invalidPasswordErrors = validatePassword(url, users, body.password, body.username);\r\n  \r\n  error = { ...missingAndEmptyErrors };\r\n  error.invalidInput = { ...invalidUsernameErrors, ...invalidPasswordErrors };\r\n  \r\n  const status = Math.max(\r\n    200,\r\n    missingAndEmptyErrors.status,\r\n    invalidUsernameErrors.status,\r\n    invalidPasswordErrors.status,\r\n  );\r\n  \r\n  if (status !== 200) {\r\n    return serverResponse(res, error, status);\r\n  }\r\n  \r\n  return next();\r\n};\r\n\r\nexport default validateAuthData;\r\n"],"file":"authValidation.js"}