{"version":3,"sources":["../../../src/middleware/validation/authValidation.js"],"names":["validateAuthData","req","res","next","required","url","body","error","missingValues","invalidUsernameErrors","users","username","invalidPasswordErrors","password","invalidInput","status","Math","max"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3C,MAAIC,QAAJ;AAD2C,MAEnCC,GAFmC,GAErBJ,GAFqB,CAEnCI,GAFmC;AAAA,MAE9BC,IAF8B,GAErBL,GAFqB,CAE9BK,IAF8B;;AAI3C,MAAID,GAAG,KAAK,qBAAZ,EAAmC;AACjCD,IAAAA,QAAQ,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,CAAX;AACD,GAFD,MAEO;AACLA,IAAAA,QAAQ,GAAG,CAAC,UAAD,EAAa,UAAb,CAAX;AACD;;AACD,MAAIG,KAAJ;AAEA,MAAMC,aAAa,GAAG,yCAA2BP,GAAG,CAACK,IAA/B,EAAqCF,QAArC,EAA+CG,KAA/C,CAAtB;AACA,MAAME,qBAAqB,GAAG,+BAAiBJ,GAAjB,EAAsBK,kBAAtB,EAA6BJ,IAAI,CAACK,QAAlC,CAA9B;AACA,MAAMC,qBAAqB,GAAG,+BAAiBP,GAAjB,EAAsBK,kBAAtB,EAA6BJ,IAAI,CAACO,QAAlC,EAA4CP,IAAI,CAACK,QAAjD,CAA9B;AAEAJ,EAAAA,KAAK,qBAAQC,aAAR,CAAL;AACAD,EAAAA,KAAK,CAACO,YAAN,qBAA0BL,qBAA1B,EAAoDG,qBAApD;AAEA,MAAMG,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcT,aAAa,CAACO,MAA5B,EAAoCN,qBAAqB,CAACM,MAA1D,EAAkEH,qBAAqB,CAACG,MAAxF,CAAf;;AACA,MAAIA,MAAM,KAAK,GAAf,EAAoB;AAClB,WAAO,6BAAeb,GAAf,EAAoBK,KAApB,EAA2BQ,MAA3B,CAAP;AACD;;AACDZ,EAAAA,IAAI;AACL,CAvBD;;eAyBeH,gB","sourcesContent":["import checkMissingRequiredValues from './checkMissingRequiredValues';\r\nimport validateUsername from './validateUsername';\r\nimport validatePassword from './validatePassword';\r\nimport users from '../../dummy/usersData';\r\nimport serverResponse from '../../controllers/authHelpers/serverResponse';\r\n\r\nconst validateAuthData = (req, res, next) => {\r\n  let required;\r\n  const { url, body } = req;\r\n  \r\n  if (url === '/api/v1/auth/signup') {\r\n    required = ['firstname', 'lastname', 'username', 'password'];\r\n  } else {\r\n    required = ['username', 'password'];\r\n  }\r\n  let error;\r\n  \r\n  const missingValues = checkMissingRequiredValues(req.body, required, error);\r\n  const invalidUsernameErrors = validateUsername(url, users, body.username);\r\n  const invalidPasswordErrors = validatePassword(url, users, body.password, body.username);\r\n  \r\n  error = { ...missingValues };\r\n  error.invalidInput = { ...invalidUsernameErrors, ...invalidPasswordErrors };\r\n  \r\n  const status = Math.max(200, missingValues.status, invalidUsernameErrors.status, invalidPasswordErrors.status);\r\n  if (status !== 200) {\r\n    return serverResponse(res, error, status);\r\n  }\r\n  next();\r\n};\r\n\r\nexport default validateAuthData;\r\n"],"file":"authValidation.js"}