{"version":3,"sources":["../../src/controllers/authControllers.js"],"names":["authControllers","req","res","body","username","password","salt","bcrypt","genSaltSync","hashedPassword","hashSync","id","users","length","email","push","token","JWT","sign","iss","sub","process","env","APP_SECRET","status","send","data"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;IAEqBA,e;;;;;;;;;2BACLC,G,EAAKC,G,EAAK;AAAA,sBACSD,GAAG,CAACE,IADb;AAAA,UACdC,QADc,aACdA,QADc;AAAA,UACJC,QADI,aACJA,QADI;;AAGtB,UAAMC,IAAI,GAAGC,kBAAOC,WAAP,EAAb;;AACA,UAAMC,cAAc,GAAGF,kBAAOG,QAAP,CAAgBL,QAAhB,EAA0BC,IAA1B,CAAvB;;AACA,UAAMK,EAAE,GAAGC,mBAAMC,MAAN,GAAe,CAA1B;AACA,UAAMC,KAAK,aAAMV,QAAN,kBAAX;;AAEAQ,yBAAMG,IAAN;AACEJ,QAAAA,EAAE,EAAFA,EADF;AAEEG,QAAAA,KAAK,EAALA,KAFF;AAGER,QAAAA,IAAI,EAAJA;AAHF,SAIKL,GAAG,CAACE,IAJT;AAKEE,QAAAA,QAAQ,EAAEI;AALZ,UARsB,CAgBtB;;;AACA,UAAMO,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AACrBC,QAAAA,GAAG,EAAE,UADgB;AAErBC,QAAAA,GAAG,EAAEhB;AAFgB,OAAT,EAGXiB,OAAO,CAACC,GAAR,CAAYC,UAHD,CAAd;;AAKA,aAAOrB,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,QAAAA,MAAM,EAAE,GADkB;AAE1BE,QAAAA,IAAI,EAAE;AACJV,UAAAA,KAAK,EAALA;AADI;AAFoB,OAArB,CAAP;AAMD;;;0BAEYf,G,EAAKC,G,EAAK;AAAA,UACbE,QADa,GACAH,GAAG,CAACE,IADJ,CACbC,QADa;;AAGrB,UAAMY,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AACrBC,QAAAA,GAAG,EAAE,UADgB;AAErBC,QAAAA,GAAG,EAAEhB;AAFgB,OAAT,EAGXiB,OAAO,CAACC,GAAR,CAAYC,UAHD,CAAd;;AAKA,aAAOrB,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,QAAAA,MAAM,EAAE,GADkB;AAE1BE,QAAAA,IAAI,EAAE;AACJV,UAAAA,KAAK,EAALA;AADI;AAFoB,OAArB,CAAP;AAMD","sourcesContent":["/* eslint-disable no-trailing-spaces */\r\nimport bcrypt from 'bcryptjs';\r\nimport JWT from 'jsonwebtoken';\r\nimport users from '../dummy/usersData';\r\n\r\nexport default class authControllers {\r\n  static signup(req, res) {\r\n    const { username, password } = req.body;\r\n    \r\n    const salt = bcrypt.genSaltSync();\r\n    const hashedPassword = bcrypt.hashSync(password, salt);\r\n    const id = users.length + 1;\r\n    const email = `${username}@epicmail.com`;\r\n    \r\n    users.push({\r\n      id,\r\n      email,\r\n      salt,\r\n      ...req.body,\r\n      password: hashedPassword,\r\n    });\r\n    \r\n    // generate token with users username\r\n    const token = JWT.sign({\r\n      iss: 'epicmail',\r\n      sub: username,\r\n    }, process.env.APP_SECRET);\r\n    \r\n    return res.status(201).send({\r\n      status: 201,\r\n      data: {\r\n        token,\r\n      },\r\n    });\r\n  }\r\n  \r\n  static login(req, res) {\r\n    const { username } = req.body;\r\n    \r\n    const token = JWT.sign({\r\n      iss: 'epicmail',\r\n      sub: username,\r\n    }, process.env.APP_SECRET);\r\n    \r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: {\r\n        token,\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"file":"authControllers.js"}