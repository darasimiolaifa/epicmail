{"version":3,"sources":["../../src/controllers/messageControllers.js"],"names":["messageControllers","req","res","allMessages","messageData","filter","message","status","setHeader","send","data","unreadMessages","sentMessages","id","params","singleMessage","Number","error","messageIndex","findIndex","deletedMessage","splice"],"mappings":"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","sourcesContent":["import messageData from '../dummy/messageData';\r\n\r\nexport default class messageControllers {\r\n  static getAllMessages(req, res) {\r\n    const allMessages = messageData.filter(message => message.status === 'read' || message.status === 'unread');\r\n    res.setHeader('content-type', 'application/json');\r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: allMessages,\r\n    });\r\n  }\r\n  \r\n  static getAllUnreadMessages(req, res) {\r\n    const unreadMessages = messageData.filter(message => message.status === 'unread');\r\n    res.setHeader('content-type', 'application/json');\r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: unreadMessages,\r\n    });\r\n  }\r\n  \r\n  static getAllSentMessages(req, res) {\r\n    const sentMessages = messageData.filter(message => message.status === 'sent');\r\n    res.setHeader('content-type', 'application/json');\r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: sentMessages,\r\n    });\r\n  }\r\n  \r\n  static getSpecificMessage(req, res) {\r\n    const { id } = req.params;\r\n    const singleMessage = messageData.filter(message => message.id === Number(id))[0];\r\n    res.setHeader('content-type', 'application/json');\r\n    if (!singleMessage) {\r\n      return res.status(404).send({\r\n        status: 404,\r\n        error: 'Message not found in our database',\r\n      });\r\n    }\r\n    \r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: singleMessage,\r\n    });\r\n  }\r\n  \r\n  static deleteSpecificMessage(req, res) {\r\n    const { id } = req.params;\r\n    const messageIndex = messageData.findIndex(message => message.id === Number(id));\r\n    res.setHeader('content-type', 'application/json');\r\n    if (messageIndex === -1) {\r\n      return res.status(404).send({\r\n        status: 404,\r\n        error: 'Message not found in our database',\r\n      });\r\n    }\r\n    \r\n    const deletedMessage = messageData.splice(messageIndex, 1)[0];\r\n    return res.status(200).send({\r\n      status: 200,\r\n      data: {\r\n        message: deletedMessage.message,\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"file":"messageControllers.js"}